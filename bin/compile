#!/usr/bin/env bash
# usage: bin/compile BUILD_DIR CACHE_DIR ENV_DIR

# TODO: Run make check
# TODO: Lower output verbosity (do not output command output)
# TODO: JPEG library switch
# TODO: Version buildpack to force not using cache
# TODO: Update poppler version

# fail fast
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output

# Enable extended globbing
shopt -s extglob

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

WORKING_DIR=$BUILDPACK_DIR/tmp/
TARGET_DIR=$BUILD_DIR/vendor/poppler
CACHED_PRECOMPILED_PACKAGE_DIR=$CACHE_DIR/vendor/poppler

POPPLER_VERSION=0.59.0
PRECOMPILED_PACKAGE_FILENAME="poppler-${POPPLER_VERSION}-compiled.tar.gz"
CACHED_PRECOMPILED_PACKAGE_PATH=$CACHED_PRECOMPILED_PACKAGE_DIR/$PRECOMPILED_PACKAGE_FILENAME

function indent() {
  sed -u 's/^/       /'
}

function topic() {
  echo "-----> $*"
}

function exports() {
  local prefix_dir=$1

  cat <<SHELL
  export PKG_CONFIG_PATH="$prefix_dir/lib/pkgconfig:\$PKG_CONFIG_PATH"
  export LD_LIBRARY_PATH="$prefix_dir/lib:\$LD_LIBRARY_PATH"
SHELL
}

mkdir -p $WORKING_DIR | indent
mkdir -p $TARGET_DIR | indent
mkdir -p $CACHED_PRECOMPILED_PACKAGE_DIR | indent

cd $WORKING_DIR

topic "Compiling poppler"
if [ -f $CACHED_PRECOMPILED_PACKAGE_PATH ]; then
  topic "Using poppler-${POPPLER_VERSION}"
  tar -xf "$CACHED_PRECOMPILED_PACKAGE_PATH" --skip-old-files -C $TARGET_DIR | indent
else
  topic "Downloading poppler-${POPPLER_VERSION} source"
  wget --no-verbose --no-clobber https://poppler.freedesktop.org/poppler-${POPPLER_VERSION}.tar.xz | indent
  tar -xf poppler-${POPPLER_VERSION}.tar.xz --skip-old-files | indent

  topic "Building poppler-${POPPLER_VERSION}"
  cd poppler-${POPPLER_VERSION}
  ./configure --prefix="$TARGET_DIR" | indent
  make | indent
  make install | indent
  make clean | indent
  make distclean | indent

  topic "Caching precompiled package"
  cd $CACHED_PRECOMPILED_PACKAGE_DIR
  # Remove old cached precompiled packages
  rm -f *.* | indent
  # Package the compiled binaries
  tar -zcvf "$PRECOMPILED_PACKAGE_FILENAME" -C $TARGET_DIR . | indent
fi

# Subsequent buildpacks need to know where the libraries are, based on the
# $BUILDPATH, which is random, e.g. /tmp/build_1b673f33c9b7c4b2f548536d3b9d7e8e
topic "Configuring environment for subsequent buildpacks"
# Use echo to expand the variables that are escaped in the exports function.
echo "$(exports "$TARGET_DIR")" > $BUILDPACK_DIR/export

# By the time the app is running, all the buildpacks output has been combined
# into the $HOME folder.
topic "Configure application environment"
mkdir -p $BUILD_DIR/.profile.d
exports "\$HOME/vendor/poppler" > $BUILD_DIR/.profile.d/000_poppler.sh

echo ""
