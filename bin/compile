#!/usr/bin/env bash
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

# fail fast
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

DOWNLOAD_DIR=$CACHE_DIR/poppler
TARGET_DIR=$BUILD_DIR/vendor/poppler

function indent() {
  sed -u 's/^/       /'
}

function topic() {
  echo "-----> $*"
}

function exports() {
  local prefix_dir=$1

  cat <<HDOC
  export PKG_CONFIG_PATH="$prefix_dir/lib/pkgconfig:${PKG_CONFIG_PATH: }"
  export LD_LIBRARY_PATH="$prefix_dir/lib:${LD_LIBRARY_PATH: }"
HDOC
}

mkdir -p $DOWNLOAD_DIR
cd $DOWNLOAD_DIR

topic "Downloading poppler source"
wget --no-verbose --no-clobber --tries=10 https://poppler.freedesktop.org/poppler-0.38.0.tar.xz | indent
tar -xf poppler-0.38.0.tar.xz | indent

topic "Building poppler"
cd poppler-0.38.0
./configure --prefix=$TARGET_DIR | indent
make | indent
make install | indent

# Subsequent buildpacks need to know where the libraries are, based on the
# $BUILDPATH, which is random, e.g. /tmp/build_1b673f33c9b7c4b2f548536d3b9d7e8e
topic "Configuring environment for subsequent buildpacks"
exports "$TARGET_DIR" > $BUILDPACK_DIR/export

# By the time the app is running, all the buildpacks output has been combined
# into the $HOME folder.
topic "Configure application environment"
mkdir -p $BUILD_DIR/.profile.d
exports "$HOME/vendor/poppler" > $BUILD_DIR/.profile.d/000_poppler.sh
